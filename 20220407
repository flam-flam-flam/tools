1、使用feign需要添加什么注解？
feign客户端位于spring-cloud-starter-feign软件包中，要启用它，我们必须使用@EnableFeignClients注解。要是用它，我们只需使用@FeignClient注解一个接口，然后将其自动连接到控制器中即可



2、ribbon配置
connectionTimeout，连接超时时间
ReadTimeout，读取超时时间
okToRetryonAllOperations,对所有操作请求都进行重试
maxautoretriesNextserver 切换服务器实例的重试次数
maxautoreties对当前实例的重试次数
listofservers无服务发现时，列表

3、zuul网关filter
PRE 在请求被路由之前调用，可用于身份验证，选择请求的服务器，记录调试信息
ROUTING这种过滤器将请求路由到微服务
post这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的http header手机统计信息和指标，并发送给客户端
error：在其他阶段发生错误是执行该过滤器

4、feign和ribbon超时时间设置，谁优先级高
feign优先级高于ribbon


5、java守护线程
在java中通常有两种线程：用户线程和守护线程，如果不设置线程属性，那么默认为是用户线程。当应用中所有的线程都是守护线程的时候，应用就可以结束了。如果还有一个或以上的非守护线程，应用就不会退出。守护线程是一种特殊的线程，在后台默默地完成一些系统性的服务，垃圾回收线程就是守护线程

6、java 引用类型
强引用，java中默认声明的就是强引用，垃圾回收器永远不会回收被引用的对象，哪怕内存不足时，jvm也会直接抛出outofMemoryError，也不会去回收强引用的对象。如果想中断强引用和对象之间的联系，可以将强引用赋值为null，这样jvm就可以适时的回收对象了
软引用，在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象。常常被用来实现缓存技术
弱引用的引用强度比软引用要更弱一些，屋内内存是否足够，只要jvm开始进行垃圾回收，娜美被弱引用关联的对象都会被回收。

虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收。虚引用必须要和ReferenceQueue引用队列一起使用，他的作用在于跟踪垃圾回收过程。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，销毁这个对象，将这个虚引用加入引用队列。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动(引用队列由referencequeue类表示



7、springboot如何加载自定义的配置文件
方法一，通过@PropertySource注解
方法二，实现environmentpostprocessor接口，在postprocessEnvironment使用properties.load方法中加载自定义配置文件。还要在spring.factories中启用我们的自定义环境处理类org.springframework.boot.env.enviromentPostProcessor=实现类



8、springboot常用注解
1)springbootApplication是一个复合注解，包含了@SpringBootConfiguration @EnableAutoConfiguration @ComponentScan这三个注解。  		  
	springbootconfiguration继承自@Configuration；	EnableAutoConfiguration注解，开启自动配置功能，将所有符合条件的Configuration配置都加载到当前SpringBoot创建并使用的Ioc容器，借助于Spring框架原有的一个工具类：springfactoriesLoader的支持。
	@componentScan,主要用于组件扫描和自动装配，我们可以通过basepackages等属性指定@ComponentScan自动扫描的范围，默认不指定，从@ComponentScan所在类的package进行扫描。
	
2）Controller控制器，处理http请求
3）RestController，复合注解相当于@ResponseBody+@Controller合在一起的作用，RestController使用的效果是将方法返回的对象直接在浏览器上展示成json格式
4）@RequestParam用来处理content-type为application/x-www-form-urlencoded,content-type默认为该属性，获取请求参数的值。请求示例：http://localhost:8080/User/getUser?uid=123
5）@RequestBody接收的参数是来自requestBody，即请求体，一般用于处理非content-type；application/x-www-form-urlencoded编码格式的数据，如application/json
6)RequestMapping是spring web应用程序中最常被用到的注解之一。这个注解会将HTTP请求映射到处理方法上
7）GetMapping用于将http get请求映射到特定处理程序的方法 注解.@RequestMapping(value="/say“，method=requestMethod.GET)等价于：@GetMapping(value="/say")
8）@postmapping用于将http post请求映射到特定处理程序的方法注解
9）@PathVariable：获取url中的数据
10）@RequestHeader 把request请求header部分的值绑定到方法的参数上
11）@Repository，DAO层注解
12）@Service用于标注服务层组件，标识定义一个bean，名称默认为当前的类名，首字母小写。 还可以通过@Service("serviceBeanId")或@Service(value="serviceBeanId")指定
13）@scope作用域注解，作用在类上和方法上，用来配置spring bean的作用域，它标识bean的作用域。 singleton单例模式：全局有且只有一个实例；prototype原型模式：每次获取bean的时候会有一个新的实例； request标识针对每一次http请求都会产生一个新的bean，同时该bean仅在当前http request内有效； session作用域标识针对每一个http请求都会产生一个新的bean，同时改bean尽在当前http session内有效
14）@Entity实体类注解
15）@bean产生一个bean的方法，明确地指示了一种方法，产生一个bean的方法，并且交给spring容器管理。
16）@autowire自动导入，作用在构造函数、方法、方法参数、类字段
17）@component
18）@propertysource
19）@importResource导入xml配置文件
20）@import导入额外的配置信息，可以导入带有@configuration直接的配置类
21）transactional事务注解。在spring中，事务有两种实现方式，编程时事务管理和声明式事务管理。
    编程式事务管理使用transactionTemplate；声明式事务管理建立在AOP之上的，其本质是对方法前后进行拦截，然后再目标方法开始之前创建或者加入一个事务，再执行万目标方法之后根据执行情况提交或者回滚事务，通过Transactional就可以进行事务操作
22）controllerAdvice 统一异常处理
23）@ExceptionHandler注解声明异常处理方法



9、mybatis的动态sql标签
if/where/trim/chooose/when/otherwise/foreach

10、http和https的区别
http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议

11、https的工作流程如下
1）tcp三次同步握手
2）客户端发送client_hello
3）服务器发送client_hello，tls协议版本version、加密套件、压缩算法、随机数
4）服务器发送证书
5）服务端发送server key Exchange（加密算法，不一定发送，RSA算法就进行该流程）
6）服务器发送server hello done
7）客户端发送自己的公钥参数，加密算法
8）服务端发送new session ticket 服务器给客户端一个会话，用处就是在一段时间之内，双方都以协商的密钥进行通信
9）服务端发送change_cipher_spec，告诉客户端密钥有效
10）服务端发送encrypted_handshake_message客诉客户端可以正常加解密
11）完成密钥协商，开始发送数据
12）完成数据发送。

12、https证书内容都包含哪些内容
电子签证机关的信息，公钥用户信息、公钥，权威机构的签字和有效期，签发日期等



13、jvm的内存结构大概分为
1）堆，线程共享。所有的对象实例以及数组都要在堆上分配。回收器主要管理的对象。 堆的作用是存放对象实例和数组。从结构上来看，可以分为新生代和老年代。而老年大又可以分为Eden空间、From Survivor空间、To survivor空间。所有新生成的对象首先都是放在新生代的，需要注意，survivor两个区是对称的，没有先后关系，所以同一个区中可能同时存在从Eden复制过来的对象和从前一个survivor复制过来的对象，而复制到老年代的只有从第一个survivor去过来的对象，而且survivor区总有一个是空的。 -Xms设置堆的最小空间大小。 -Xmx设置堆的最大空间大小。 -XX:NewSize设置新生代最小空间大小。 -XX:MaxNewSize设置新生代最小空间大小。此区域是垃圾回收的主要操作区域。

2）方法区：线程共享。 存储类信息、常量、静态变量，即时编译器编译后的代码。控制参数-XX:PermSize设置最小空间 -XXMaxPermSize设置最大空间
3）方法栈：线程私有。存储局部变量表，操作栈、动态链接、方法出口，对象指针。-Xss控制每个线程栈的大小
4）本地方法栈：线程私有。为虚拟机使用到的Native方法服务。和方法栈（虚拟机栈一样）本地方法栈区域也会抛出StackOverflowError（尾递归、死循环）和OutOfMemoryError异常
5）程序技术器：线程私有，它可以看做是当前线程所执行的字节码的行号指示器，指向下一条要执行的指令。此内存区域是唯一一个在java虚拟机规范中没有规定任何outofmemoryerror情况的区域。


14、mysql事务隔离级别
1）读未提交。未加锁，性能最高，a事务update，事务B查询。 A事务回滚，事务B得到的就是脏数据
2）读提交。就是一个事务只能读到其他事务已经提交过的数据（oracle默认隔离级别）。事务Aupdate，事务查询到之前的数据，事务A提交，事务B再查，查到更新后的数据，在同一事务B中，不同时刻同样的查询条件，查询出来的记录内容不一样。事务A的提交影响了事务B的查询结果，这就是不可重复读，也就是读提交隔离级别
3）可重复读。是指事务不会读到其他事务对已有数据的修改，即使其他事务已提交，也就是说，事务开始读到的已有数据是什么，在事务提交前的任意时刻，这些数据的值都是一样的。但是对于其他事务新插入的数据是可以读到的，这也就引发了幻读问题。
实现方式：mysql采用了MVVC（多版本并发控制）的方式。每次读提交都会生成一个快照。 当前事务内的更新，可以读到；版本为提交，不能读到；版本已提交，但是却在创建快照创建后提交的，不能读到，版本已提交，且在快照创建前提交的，可以读到。
并发写的问题，两个事务，对同一条数据做修改，通过行锁解决。解决幻读，行锁+间隙锁（可重复读可以解决幻读问题，间隙锁就是数字区间锁）
4）串行化 后一个事务的执行必须等待前一个事务结束

15、mysql索引类型fulltext，hash，btree。种类：普通索引； 唯一索引； 主键索引；组合索引；全文索引

16、索引失效的集中情况
1）有or但是不是所有条件都有索引
2）复合索引未用左列字段
3）like以%开头
4）where中索引列有运算
5）where中索引列使用了函数
6）mysql觉得全表扫描更快时（数据少）
7）需要类型转换

17、java基本类型：byte、short、int、long、double、float、char、boolean，对应包装类型Byte、Short。Integer、Long、Double、Float、Character、Boolean。基本类型转化为包装类型叫装箱，反之拆箱。

18、基本类型和包装类型的区别
1）包装类型可以为null，而基本类型不可以。为什么pojo的属性必须要用包装类型呢。数据库的查询结果可能是null，如果使用基本类型的话，因为要自动拆箱，就会抛出空指针异常。
2）包装类型可用于泛型，而基本类型不可以。因为是泛型在编译时会进行类型擦除，最后只保留原始类型，而原始类型只能是object类及其子类。
3）基本类型比包装类型更高效，基本类型在栈中直接存储值，而包装类型则存储的是对重的引用（占用更多的内存空间）。
4）两个包装类型的值可以相同，但却不相等。 两个包装类型在使用“==”进行判断的时候，判断的是器指向的地址是否相等。而equals的输出结果为true，因为equals方法内部比较的是两个int值是否相等。
5）自动装箱和自动拆箱。当需要进行自动装箱时，如果数字在-128至127之间时，会直接使用缓存中的对象，而不是重新创建一个对象。

19、static成员变量属于类，static成员方法也属于类，static代码块独立于成员变量和成员函数，只会被执行一次，static与final结合使用表示的意思：对于变量，表示一旦赋值不能修改，并且通过类名可以访问，对于方法，表示该方法不可被覆盖，并且可以通过类名直接访问。
不能再成员函数内部定义static变量，应该将静态变量置于静态方法的外面，静态方法不能访问非static类型的变量

20、final只能赋值一次，将集合类对象定义为final，标识该集合类无法重新赋值。但是仍然可以对该集合进行添加和删除修改。如果结合类的对象是基本类型变量，比如int，long等，用final类型修饰的话，可以修改、添加、移除。（数组也一样，不能根据索引赋值，但是可以改变数组中的内容）


21、springboot内置容器，tomcat、jetty、underTow，默认是tomcat。server.tomcat.max-threads配置最大线程数



22、java线程创建方式
1）继承Thread类，并重写他的run方法，我们就可以创建一个线程。调用：创建这个子类对象，并调用start方法启动线程
2）实现Runnable接口，并实现run方法。创建runnable实现类对象，并把它作为target传入Thread的构造函数中，最后调用start方法启动线程。
3）实现Callable接口，并结合future实现。首先定义一个callable的实现类，并实现call方法（带返回值），然后通过futureTask的构造方法，把这个callable实现类的对象传进去。把futuretask作为Thread类的target，创建thread线程对象。通过futureTask的get方法获取线程的执行结果。

第一种简单，第二第三种是实现接口还可以继承其他类（java不支持多重继承，一个类只能有一个父类），callable重写的是call（），执行任务后有返回值，可以里抛出异常，可以了解任务执行情况，可取消任务的执行。


23、线程池拒绝策略：
1）callRunspolicy，触发拒绝策略时，使用调用线程直接运行任务，一般并发比较小，性能要求不高，不允许失败，但是调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞。
2）abortpolicy-丢弃任务，并抛出决绝异常信息，线程池默认的拒绝策略。必须处理好抛出的异常，否则会大段当前的执行流程，影响后续的任务执行。
3）discardPolicy，直接丢弃
4）discardOldestPolicy 丢弃阻塞队列中最老的一个任务，并将新任务加入

dubbo的工作线程触发了线程拒绝后，主要做三个事情：1）打印警告日志2）输出当前线程栈详情3）抛出异常。


24、什么时候触发拒绝策略：当提交的任务数大于corePoolSize时，会优先放到队列缓冲区，只有填满了缓冲区后，才会判断当前运行的任务是否大于maxpoolSize，小于是会新建线程处理。大于时就出发了拒绝策略。  总结就是：当前提交任务数大于maxpoolsize+queuecapacity时就会触发线程池的拒绝策略了。


25、java线程池。Executors提供了4种不同的线程池可供使用。
1）newCachedthreadPool创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程
2）newfixedthreadpool,创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待
3）newScheduledThreadpool，创建一个周期性的线程池，支持定时及周期性执行任务。
4）newSingleThreadExecute，创建一个单线程的线程池。

通过ThreadPoolExecutor类自定义,参数如下：
corePoolSize：核心线程数
maximumPoolSize：最大线程数
keepaliveTime线程没有任务执行执行时最多保持多久时间停止
unit：时间单位
workQueue：一个阻塞队列，用来存储等待执行的任务（ArrayBlockqueue有界、LinkedBlockingQueue有界、delayQueue延迟获取无界队列、synchronousQueue（一个不存储元素的阻塞队列）、priorityblockingQueue支持排序的无界队列、LinkedTransferQueue链表无界队列，多了transfer和trytransfer方法、linkedblockingDeque链表双向阻塞队列）
threadFactory：线程工厂
handler：拒绝策略（abortPolicy、callerRunsPolicy、DiscardOldestpolicy、DiscardPolicy）


26、java中的集合，线程安全的集合
collection和map，collection有两个重要的子接口，list和set，其中list有序可重复，set无序不可重复，list接口的主要实现类有arrayList（可以通过索引来访问集合中的指定元素）和LinkedList，set接口的主要实现类有hashset和treeset。   map用于储存键值对，并且key是唯一的，map的主要实现类有hashmap和treemap

ConcurrentHashMap和HashTable都是线程安全的集合，他们的不同主要是加锁力度上的不同，hashTable的加锁方法是给每个方法加上synchronized关键字，这样锁住的是整个Table对象，而ConcurrentHashMap是更细粒度的加锁。在1.8以前是segment锁，在1.8以后是行锁。


27、collection集合遍历
1）Iterator迭代器，如果调用remove的方法删除元素，会出现异常，原因是集合中删除元素会导致迭代次数发生改变，导致迭代器的结果不准确。
2）foreach，不能对集合中元素进行修改
3）for

hashset是set接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的。当向HashSet结合中添加元素时，首先会调用hashcode方法来确定元素的存储位置，然后再调用元素对象的equals方法来确保该位置没有重复元素。  向集合中存入元素时，为了保证hashSet正常工作，要求在存入对象时，需要重写object类中的hashcode()和equals()方法。String类已经默认重写了hashCode的方法。

TreeSet采用平衡二叉树来存储元素，这样的结构可以保证TreeSet集合中没有重复的元素，且可以排序


Map集合遍历：
1）使用Iterator迭代器遍历： 有两种方法keySet和entrySet。keySet方法需要将Map集合中所有的键对象转换为Set单列集合，接着将含键对象的Set集合转换为Iterator接口对象，然后遍历。entrySet方法将原有的Map集合中的兼职作为一个整体返回set集合进行遍历
2）foreach方法遍历
	

28、arrayList的扩容机制，capacity是容积，size是已存储占用的容量。ArrayList的构造方法：
	（1）无参构造方法，构造一个初始容量为10的空列表，java8中使用了延迟初始化，使用无参构造方法，并不会马上创建长度为10的数组，而是在调用add方法添加第一个元素的时候才对数组进行书促使华。
	（2）指定初始容量的构造方法。如果初始容量大于0，那么直接创建一个指定大小的数组；如果初始容量等于0，，创建一个空数组，如果小于0 抛出异常。
	（3）指定初始集合的构造方法。
	扩容，容量不够的话，会调用grow方法进行扩容操作，其实是调用了arrays.copy方法来进行扩充数组容量的。 默认情况下，新的容量会是原容量的1.5倍。一般情况下，如果扩容1.5倍后就大于期望容量，那就返回这个1.5倍的值，而如果小于期望容量，那就返回期望容量。使用1.5倍这个数值而不是直接使用期望容量，是为了防止频繁扩容影响性能。 另外可以通过调用ensurecapacity（）进行手动扩容。 一次性扩容到位。 arrayList没有缩容。
	
	扩容需要移动数据，非常影响性能，尽量避免arrayList内部扩容。
	
	

29、currenthashmap 1）key和value是否可以为空，底层的数据结构，数组、链表、红黑树。 节点的value和next字段使用volatile修饰，保证了可见性，写数据使用了CAS。
2）hashmap数组长度必须是2的n次幂，为了使用与运算（效率比取余高）；还为了扩容时方便数据迁移运算数据迁移。如果在创建的时候给的不是2的n次幂，也会被转换成2的n次幂
3）构造方法不创建数组，put的时候创建


4）红黑树（最长不超过最短子树两倍） ，查询性能和插入性能的平衡点


5）ReentrantLock是可重入锁，一个线程可以多次获取同一个锁。需要手工获取锁和释放锁。可以指定是公平锁（构造函数中有一个参数可以指定）还是非公平锁，所谓公平锁就是先等待的线程先获得锁。  ReenTrantLock的实现是一种自旋锁，通过循环调用CAS操作来实现加锁。等待过程可以中断，去做别的事。  ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比synchronized，ReentrantLock类提供了一些高级功能，主要有以下三项： 等待可中断；公平锁；锁绑定多个条件，实现分组唤醒线程（精确唤醒）

6）synchronize也是可重入锁，（独占锁，悲观锁）锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。便利，有编译器保证加锁和释放锁。非公平锁，随机唤醒一个线程或者唤醒所有线程。等待过程不可以中断，一直等。  Synchronize在编译时如何实现锁机制，synchronized编译会在同步块的前后分别形成monitorenter和monitorexit这两个指令码。在执行monitorenter指令时，首先要尝试获取对象锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，把锁的计算器加1，相应的，在执行monitorexit指令时会将锁计算器减1，当计算器为0时，锁就被释放了。如果获取对象锁失败，那当前线程就要阻塞，知道对象锁被另一个线程释放为止。

7）CAS，区别于synchronous同步锁的一种乐观锁。CAS是一种无锁，当且仅当预期值A和内存值V相同是，将内存值V修改为B，否则什么都不做，整个比较并替换的操作是一个院子操作。不断重试，知道成功为止。
	问题，循环时间长cpu开销大；只能保证一个共享变量的院子操作，引发ABA问题。 CAS的使用流程通常如下，1）首先从地址V读取值A；2）根据A计算目标值B 3）通过CAS以原子的方式将地址V中的值从A修改为B。
	ABA问题如果在第一步和第三步之间，V的值曾经被修改成了B，后来又被改回了A，那么CAS就误认为它从来没有被改变过。 java并发包为了解决这个问题，提供了带有标记的原子引用类AtomicStampedReference。它可以通过控制变量值的版本来保证CAS的正确性。


8）自旋锁,当一个线程在获取锁的时候，如果锁已经被其他线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。获取锁的线程一直处于活跃状态，不会发生线程上下文切换。 自旋锁本身无法保证公平性，同时也无法保证可重入性。 为了实现可重入锁，我们需要引入一个计数器，用来记录获取锁的线程数。

互斥锁与自旋锁相似，不同的是，当加锁失败时，互斥锁用线程切换来应对，放弃cpu；自旋锁则用忙等待来应对，不断循环获取锁，一直占着cpu。

9）LinkedBlockingQueue相当于是普通的LinkedList加上ReentrantLock，而ReentrantLock内部都是靠CAS来实现原子性。而CAS在高并发时因为线程会不停重试


10）线程安全需要保证几个基本特性
	原子性，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现
	可见性，是一个线程修改了某个共享变量，其状态能够立即被其他县城知晓，通常被解释为将线程本地状态反映到主内存上，volatile就是负责保证可见性的
	有序性，是保证线程内串行寓意，避免指令重排。
	
11）读写锁，读锁和写锁。适用于能明确区分读操作和写操作的场景，工作原理，当写锁没有被线程持有时，多个线程能够并发地持有读锁，这大大提高了共享资源的访问效率，因为读锁适用于读取共享资源的场景，所以多个线程同时持有读锁也不会破坏共享资源的数据；  但是，一旦写锁被线程持有后，读线程的获取的操作会被阻塞，而其他写线程获取写锁的操作也会被阻塞。  所以说，写锁是独占锁，因为任何时刻只能有一个线程持有写锁，而读锁是共享锁，因为读锁可以被多个线程同时持有。  读写锁在读多写少的场景，能发挥出优势。  根据实现不同，读写锁可以分为读优先锁和写优先锁。

读优先锁，当A在读，B写会阻塞，C读不会阻塞。A和C释放读锁之后，写B才可以成功获取锁
写优先锁，当A在读，B写会阻塞，C读也会阻塞，A释放读锁后，写线程B就可以成功获取锁。
公平读写锁比较简单的一种方式是：用队列把获取锁的线程排队，不管是写线程还是度线程都按照先进献丑的原则加锁即可，这样读线程仍然可以并发。


12）悲观锁：互斥锁、自旋锁、读写锁，都是属于悲观锁。悲观锁认为多线程同事修改共享资源的概率比较高，很容易出现冲突，所以访问共享资源前，先要上锁

13）乐观锁，认为多线程同时修改共享资源的概率比较低，工作方式是先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作。乐观锁全程并没有加锁，所以它也叫无锁变成。


30、双亲委派，指的是当一个类加载器收到类加载的请求的时候，他不会直接去加载指定的类，而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会有当前这个加载器来负责累的加载。
	为什么需要双亲委派，因为类加载器之间有严格的层次关系，也就使得java类也随之具备了层次关系，或者说优先级。通过委派的方式，可以避免类的重复加载；通过双亲委派的方式，还保证了安全性，加载的类不会被破坏，保证核心.class不能被篡改。
	
	父子加载器之间的关系是继承么，不是以继承的关系来实现，而是都使用组合关系来复用父加载器的代码的。
	
	双亲委派实现，先检查是否已经被加载过；如果没有加载则调用父加载器的loadClass方法进行加载 ；若父加载器为空则默认使用启动类加载器作为父加载器；如果父类加载失败，破除ClassNotFoundException异常后，再调用自己的方法进行加载。
	
	如何主动破坏双亲委派机制？自定义一个类加载器，重写其中的loadClass方法，使其不进行双亲委派即可。
	
	loadClass（）主要进行类加载的方法，默认的双亲委派机制就实现在这个方法中；findClass()根据名称或位置加载class字节码；definclass（）把字节码转化为Class；
	
	如果我们想定义一个类加载器，但是不想破坏双亲委派模型，可以继承ClassLoader，并且重新findClass方法
	
	为什么tomcat要破坏双亲委派，tomcat是web容器，一个web容器可能需要部署多个应用程序，不同的应用程序会依赖同一个第三方库的不同版本，但是不同版本的类库中某一个类的全路径名可能是一样的。如果采用双亲委派类加载机制，那么是无法加载多个相同的类。 所以tomcat破坏双亲委派原则，提供隔离的机制，为每个web容器单独提供一个webAppclassLoader加载器，webAppclassLoader负责加载本身的目录下的class文件，加载不到时再交给commonClassLoader加载，这和双亲委派刚好相反
	
	
	为什么JDBC、JNDI等需要破坏双亲委派，DriverManager会先被类加载器加载，位于rt.jar下面，所以他会被根加载器加载。加载时，会执行该类的静态方法serverLoader.load(Driver.class); 这段代码，会尝试加载classpath下面的所有实现了Driver接口的实现类。 由于DriverManager是被根加载器加载的，但是这些实现类都是第三方提供的，根据双亲委派原则，第三方的类不能被根加载器加载。于是就在JDBC中通过引入了线程上下文加载器，默认是AppLocassloader的方式破坏了双亲委派原则。

1）	BootStrap ClassLoader启动类加载器；主要负责加载java核心类库，jre_home\lib下的rt.jar、resources.jar/charsets.jar和class等
2）Extention ClassLoader标准扩展类加载器；主要负责加载jre_home\lib\ext目录下的jar包和class文件
3）Aplication ClassLoader应用类加载器；主要负责加载当前应用classpath下的所有类
4）userClassLoader用户自定义的类加载器。可以加载指定路径的class文件。
也就是说说，一个用户自定义的类，无论如何也不会被BootStrap和extention加载器加载的。

31、复写equals准则
自反性，x.equals（x）为true，对称性，传递性， 一致性（多次比较，结果一样），非空性。

32、api和spi。接口有调用方和被调用方（实现方），  当实现方提供了接口和实现。这种就是api； 当调用方定义接口标准，被调用方实现接口，这就是spi。SPI机制的具体实现本质上是通过凡是完成的。

